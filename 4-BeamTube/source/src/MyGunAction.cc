//*********************************************
//  This is auto generated by G4gen 0.6
//                                  author:Qian

#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4Event.hh"
#include "G4ParticleGun.hh"
#include "G4GeneralParticleSource.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"
#include "Verbose.hh"
#include "Randomize.hh"
#include "G4RotationMatrix.hh"
#include "G4Transform3D.hh"

#include "MyGunAction.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

using namespace std;

MyGunAction *MyGunAction::fInstance = 0;

MyGunAction::MyGunAction()
    : G4VUserPrimaryGeneratorAction(), fParticleGun(0), fParticleSourceGun(0)
{
    if (verbose)
        G4cout << "====>MyGunAction::MyGunAction()" << G4endl;
    fPGorGPS = true; //false for GPS, true for Particle Gun

    G4int nofParticles = 1;
    fParticleGun = new G4ParticleGun(nofParticles);
    
    // default particle kinematic
    G4ParticleTable *particleTable = G4ParticleTable::GetParticleTable();
    G4ParticleDefinition *particle = particleTable->FindParticle("proton");
    fParticleGun->SetParticleDefinition(particle);

    gunEng = 250 * MeV;
    gunPos = G4ThreeVector(0., 0., 0.);
    gunDirection = G4ThreeVector(0., 1., 0.);
    gunPolarization = G4ThreeVector(1., 0., 0.);

    SetParticle();
    //create a messenger for this class
    fGunMessenger = new MyGunMessenger(this);

    fRootFile = G4String("./root/tmp.root");
    fTxtFile = G4String("./gif/tmp.txt");
    fProgFile = G4String("./gif/progress.txt");

    fParticleSourceGun = new G4GeneralParticleSource();
    fParticleSourceGun->SetParticleDefinition(particle);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

MyGunAction::~MyGunAction()
{
    delete fParticleGun;
    delete fParticleSourceGun;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyGunAction::SetParticle()
{
    fParticleGun->SetParticleEnergy(gunEng);
    fParticleGun->SetParticleMomentumDirection(gunDirection);
    fParticleGun->SetParticlePosition(gunPos);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyGunAction::GeneratePrimaries(G4Event *anEvent)
{
    if (verbose)
        G4cout << "====>MyGunAction::GeneratePrimaries()" << G4endl;

    if (fPGorGPS == true)
    {
        SetParticle();
        fParticleGun->GeneratePrimaryVertex(anEvent);
    }
    else
        fParticleSourceGun->GeneratePrimaryVertex(anEvent);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
